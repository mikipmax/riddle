package ec.edu.uce.calculabilidad.clases;

/**
 * PROYECTO: Sistema Animal Riddle, es un juego que adivinará el animal que un
 * usuario este pensando
 *
 * Clase de tipo Jframe que será la pantalla principal de neustro sistema
 * FECHA:25-11-2017
 *
 *
 * @author: 1312960444 Michael Ponce Cevallos, 1723465066 Jairo Mena 1726581141
 * Marlon Oña
 * @version 1.0.0
 */
/**
 * Importamos las librerias necesarias
 */
import ec.edu.uce.calculabilidad.pojos.Arbol;
import ec.edu.uce.calculabilidad.pojos.NodoBinario;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.Frame;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;

public class Gui extends javax.swing.JFrame {

    private JDialog dibujoEmergente = new JDialog(); //Instancio un Jdialog

    static Arbol a = null; //inicializo el arbol en null

    /**
     * Creates new form NewJFrame
     */
    public Gui() {
        initComponents();
        setLocationRelativeTo(null); //envio la ventana al centro de la pantalla
        setIconImage(new ImageIcon(getClass().getResource("/images/star.jpg")).getImage());
        /**
         * Aqui lo que hago es cargar los datos de mi arbol desde un archivo
         */
        try {
            a = cargarArbol();
        } catch (Exception e) {
            System.out.println("fallo");
        }
//Si no hbuiera datos, el arbol solo conocera un animal que es el pájaro
        if (a == null) {
            NodoBinario nodo = new NodoBinario("siames", "");
            a = new Arbol(nodo);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        texto = new javax.swing.JTextArea();
        txtRes = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(680, 840));
        setMinimumSize(new java.awt.Dimension(680, 840));
        setPreferredSize(new java.awt.Dimension(680, 840));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Animal Riddle", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Algerian", 1, 22))); // NOI18N
        jPanel2.setName(""); // NOI18N

        texto.setEditable(false);
        texto.setColumns(20);
        texto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        texto.setLineWrap(true);
        texto.setRows(5);
        jScrollPane1.setViewportView(texto);

        txtRes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtRes.setEnabled(false);
        txtRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("¡ Empezar a Jugar !");
        jButton1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/img1.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                                .addComponent(txtRes))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRes, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2.getAccessibleContext().setAccessibleDescription("");

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 670, 770);

        jInternalFrame2.setEnabled(false);
        jInternalFrame2.setVisible(true);

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 114, Short.MAX_VALUE)
        );

        jDesktopPane1.add(jInternalFrame2);
        jInternalFrame2.setBounds(0, 0, 220, 150);

        getContentPane().add(jDesktopPane1);
        jDesktopPane1.setBounds(740, 220, 220, 167);

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        jMenuBar1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jMenu1.setText("Opciones");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Ver Árbol");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator4);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");
        jMenu2.setBorderPainted(true);
        jMenu2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jMenuItem3.setText("Información General");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);
        jMenu2.add(jSeparator1);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jMenuItem5.setText("Acerca de ..........");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);
        jMenu2.add(jSeparator2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Este método se encarga de escuchar si se ha dado click en el bonton para
     * visualizar el árbol
     *
     * @param evt: nombre del evento a escuchar
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.dibujoEmergente.hide();

        this.pintar(); //llamo al metodo que se encarga de pintar el árbol
        if (this.dibujoEmergente.isVisible()) {

            this.dibujoEmergente.setVisible(false);
        } else {
            this.dibujoEmergente.setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        metodo();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);//para salir de la ejecución del programa
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void txtResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResActionPerformed

    }//GEN-LAST:event_txtResActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        new AcercaDe(this, rootPaneCheckingEnabled).setVisible(true);//llamo a la ventna que muestra información del sistema
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        abrirArchivo("Manual.pdf"); //llamo al metodo para abir un archivo pdf
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    /**
     * metodo para abrir un archivo de texto
     *
     * @param archivo: es la ubicación donde esta el archivo de texto
     */
    public void abrirArchivo(String archivo) {

        try {

            File objetofile = new File(archivo);
            Desktop.getDesktop().open(objetofile);

        } catch (IOException ex) {

            System.out.println(ex);

        }

    }

    /**
     * Metodo que se encarga de guardar los datos de mi árobl en un determinado
     * momento
     */
    public static void guardarArbol() {
        try {
            
            try (FileOutputStream fileOut = new FileOutputStream("data.txt"); //creo el archivo llamado data.txt
                    ObjectOutputStream out = new ObjectOutputStream(fileOut)) {
                out.writeObject(a);
            }
            System.out.printf("Serialized data is saved in data.txt");
        } catch (IOException i) {
            System.out.println(i);
        }
    }

    /**
     * Mëtodo que me permite cargar el estado del arbol desde un archivo
     *
     * @return: retorna el arbol en su totalidad
     */
    private static Arbol cargarArbol() {
        Arbol e = null;
        try {
            try (FileInputStream fileIn = new FileInputStream("data.txt");
                    ObjectInputStream in = new ObjectInputStream(fileIn)) {
                e = (Arbol) in.readObject();
            }
        } catch (FileNotFoundException i) {
            System.out.println(i);
        } catch (ClassNotFoundException c) {
            System.out.println("Arbol class not found");
            System.out.println(c);
        } catch (IOException ex) {
            System.out.println(ex);
        }
        return e;
    }

    /**
     * Este método, contiene una parte del algoritmo del juego
     */
    public void metodo() {
        texto.setText("");

        boolean seguir = true;
        ///Empezamos el juego

        do {
            texto.append(" \n          Pc dice: ¿Está pensando en alguna raza de gato?");
            jmodal dialogoModal = new jmodal((Frame) this);
            dialogoModal.setSize(540, 35); //envió el tamaño de mi jtextfield

            dialogoModal.setLocation(txtRes.getLocationOnScreen());//tomo como referencia el lugard en donde esta mi jtextfield de respaldo
            dialogoModal.setVisible(true);
            String resp = dialogoModal.getText();
            texto.append("\nJugador dice: " + resp);

            dialogoModal.setText();
            if (resp.equalsIgnoreCase("si")) {
                jugar(a.Raiz);
                texto.append(" \n          Pc dice: ¿Desea jugar otra vez?");
                dialogoModal.setSize(540, 35);

                dialogoModal.setLocation(txtRes.getLocationOnScreen());
                dialogoModal.setVisible(true);
                String temp = dialogoModal.getText();
                texto.append("\nJugador dice: " + temp);
                dialogoModal.setText();
                if (temp.equalsIgnoreCase("no")) {
                    seguir = false;
                    texto.append("\n!! Juego finalizado");
                }

            } else {
                texto.append("\n!! Juego finalizado");
                texto.append(" \n          Pc dice:  ¿Desea jugar otra vez?");
                dialogoModal.setSize(540, 35);

                dialogoModal.setLocation(txtRes.getLocationOnScreen());
                dialogoModal.setVisible(true);
                String temp = dialogoModal.getText();
                texto.append("\nJugador dice: " + temp);
                dialogoModal.setText();
                if (temp.equalsIgnoreCase("no")) {
                    seguir = false;
                    texto.append("\n!! Juego finalizado");
                }
            }

        } while (seguir);//va seguir mientras el usuario responda que si

    }

    /**
     * Netodo que contiene gran parte del algoritmo del juego
     *
     * @param n: resive como parametro el nodo del árbol
     */
    void jugar(NodoBinario n) {

        String salir = "no";

        do {
            if (n.Hder == null && n.Hizq == null) { //si es que el nodo derecho y el ixquierdo estan vacios

                texto.append("\n          Pc dice: ¿Es un " + n.dato + "?");
                jmodal dialogoModal = new jmodal((Frame) this);
                dialogoModal.setSize(540, 35);

                dialogoModal.setLocation(txtRes.getLocationOnScreen());
                dialogoModal.setVisible(true);
                String respuesta = dialogoModal.getText();
                texto.append("\nJugador dice: " + respuesta);
                dialogoModal.setText();

                if (respuesta.equalsIgnoreCase("si")) {
                    texto.append("\n          Pc dice: Soy un genio!!!!");
                    salir = "si";
                } else {
                    texto.append(" \n           Pc dice: ¿Que raza de gato es?");

                    dialogoModal.setSize(540, 35);

                    dialogoModal.setLocation(txtRes.getLocationOnScreen());
                    dialogoModal.setVisible(true);
                    String animal = dialogoModal.getText();
                    texto.append("\nJugador dice: " + animal);
                    dialogoModal.setText();
                    texto.append(" \n           Pc dice: Qué pregunta distinguiria un " + animal + " de un " + n.dato);

                    dialogoModal.setSize(540, 35);

                    dialogoModal.setLocation(txtRes.getLocationOnScreen());
                    dialogoModal.setVisible(true);
                    String pregunta = dialogoModal.getText();
                    texto.append("\nJugador dice: " + pregunta);
                    dialogoModal.setText();
                    texto.append(" \n           Pc dice: Si la raza del gato fuera un " + animal + " ¿Cuál sería la respuesta?");

                    dialogoModal.setSize(540, 35);

                    dialogoModal.setLocation(txtRes.getLocationOnScreen());
                    dialogoModal.setVisible(true);
                    String respp = dialogoModal.getText();
                    texto.append("\nJugador dice: " + respp);
                    dialogoModal.setText();

                    if (respp.equalsIgnoreCase("si")) {

                        a.InsertaNodo(n, n.dato, "no");
                    } else {

                        a.InsertaNodo(n, n.dato, "si");
                    }
                    n.dato = pregunta;

                    a.InsertaNodo(n, animal, respp);
                    salir = "si";
                }
                salir = "si";
            } else {
                texto.append("\n           Pc dice: ¿" + n.dato + "?");

                jmodal dialogoModal = new jmodal((Frame) this);
                dialogoModal.setSize(565, 35);

                dialogoModal.setLocation(txtRes.getLocationOnScreen());
                dialogoModal.setVisible(true);
                String resppi = dialogoModal.getText();
                texto.append("\nJugador dice: " + resppi);
                dialogoModal.setText();
                if (resppi.equalsIgnoreCase("si")) {
                    jugar(n.Hder);
                    salir = "si";
                } else {
                    jugar(n.Hizq);
                    salir = "si";

                }

            }

        } while (salir != "si");

    }

    /**
     * Método que se encarga de pintar el Jframe para mostrar el árbol dibujado
     */
    private void pintar() {
        this.jDesktopPane1.removeAll();
        Rectangle tamaño = this.jInternalFrame2.getBounds();
        this.jInternalFrame2 = null;
        this.jInternalFrame2 = new JInternalFrame("Representación gráfica", true);
        this.jDesktopPane1.add(this.jInternalFrame2, JLayeredPane.DEFAULT_LAYER);
        this.jInternalFrame2.setVisible(true);
        this.jInternalFrame2.setBounds(tamaño);
        this.jInternalFrame2.setEnabled(false);
        this.jInternalFrame2.add(Gui.a.getDibujo(), BorderLayout.CENTER);
        this.incializaVentanaEmergente();
        this.dibujoEmergente.getContentPane().add(Gui.a.getDibujo());
    }

    /**
     * Nos sirve para llamar al Jdialog que contiene ya el arbol dibujado
     */
    private void incializaVentanaEmergente() {
        this.dibujoEmergente = new JDialog(this, rootPaneCheckingEnabled);
        this.dibujoEmergente.hide();
        this.dibujoEmergente.setBounds(new Rectangle(1280, 720)); //le doy una dimensión de  1280x720 
        this.dibujoEmergente.setLocationRelativeTo(null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private static javax.swing.JTextArea texto;
    public static javax.swing.JTextField txtRes;
    // End of variables declaration//GEN-END:variables
}
